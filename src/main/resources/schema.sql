-- PUBLIC.RATING definition

-- Drop table

-- DROP TABLE IF EXISTS PUBLIC.FRIENDSHIP;
-- DROP TABLE IF EXISTS PUBLIC.FILM_GENRE;
-- DROP TABLE IF EXISTS PUBLIC.GENRE;
-- DROP TABLE IF EXISTS PUBLIC.USERS;
-- DROP TABLE IF EXISTS PUBLIC.FILM;
-- DROP TABLE IF EXISTS PUBLIC.RATING;

CREATE TABLE IF NOT EXISTS PUBLIC.GENRE (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    GENRE VARCHAR_IGNORECASE(15) UNIQUE
);

CREATE TABLE IF NOT EXISTS PUBLIC.FILM_GENRE (
    GENRE_ID INTEGER REFERENCES PUBLIC.GENRE,
    FILM_ID INTEGER REFERENCES PUBLIC.FILM,
    PRIMARY KEY (FILM_ID, GENRE_ID)
);

CREATE TABLE IF NOT EXISTS PUBLIC.RATING (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    RATING VARCHAR_IGNORECASE(20)
);

CREATE TABLE IF NOT EXISTS PUBLIC.FILM (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR_IGNORECASE(100),
    DESCRIPTION VARCHAR_IGNORECASE,
    RELEASE_DATE DATE,
    DURATION INTEGER,
    RATING_ID INTEGER UNIQUE,
    FOREIGN KEY (RATING_ID) REFERENCES PUBLIC.RATING(ID)
);

CREATE TABLE IF NOT EXISTS PUBLIC.USERS (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EMAIL VARCHAR_IGNORECASE(255),
    LOGIN VARCHAR_IGNORECASE,
    NAME VARCHAR_IGNORECASE,
    BIRTHDAY DATE
);

CREATE TABLE IF NOT EXISTS PUBLIC.FRIENDSHIP (
    USER_ID INTEGER NOT NULL REFERENCES PUBLIC.USERS,
    FRIEND_ID INTEGER NOT NULL REFERENCES PUBLIC.USERS,
    PRIMARY KEY (USER_ID, FRIEND_ID)
);

CREATE TABLE IF NOT EXISTS PUBLIC.FILM_LIKES (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID INTEGER NOT NULL REFERENCES PUBLIC.USERS,
    FILM_ID INTEGER NOT NULL REFERENCES PUBLIC.FILM
);


